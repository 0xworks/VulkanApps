#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_tracing : require

#include "Bindings.h"
#include "Constants.h"
#include "Random.glsl"
#include "RayPayload.glsl"
#include "UniformBufferObject.h"

layout(set = 0, binding = BINDING_TLAS) uniform accelerationStructureEXT world;
layout(set = 0, binding = BINDING_ACCUMULATIONIMAGE, rgba32f) uniform image2D accumulationImage;
layout(set = 0, binding = BINDING_OUTPUTIMAGE, rgba8) uniform image2D outputImage;
layout(set = 0, binding = BINDING_UNIFORMBUFFER) readonly uniform UBO {
   UniformBufferObject ubo;
};

layout(push_constant) uniform PC {
  Constants constants;
};

layout(location = 0) rayPayloadEXT RayPayload ray;


void main() {
   ray.randomSeed = InitRandomSeed(InitRandomSeed(gl_LaunchIDEXT.x, gl_LaunchIDEXT.y), ubo.accumulatedFrameCount);

   const vec2 uv = (vec2(gl_LaunchIDEXT.xy) + vec2(RandomFloat(ray.randomSeed), RandomFloat(ray.randomSeed))) / vec2(gl_LaunchSizeEXT.xy) * 2.0 - 1.0;

   const vec2 offset = constants.lensAperture * RandomInUnitDisk(ray.randomSeed);
   vec4 origin = ubo.viewInverse * vec4(offset, 0.0, 1.0);
   const vec4 target = ubo.projInverse * vec4(uv, 1.0, 1.0);
   vec4 direction = ubo.viewInverse * vec4(normalize(target.xyz * constants.lensFocalLength - vec3(offset, 0.0)), 0.0);

   vec3 rayColor = vec3(1.0);

   for (uint b = 0; b < constants.maxRayBounces; ++b) {
      traceRayEXT(
         world,
         gl_RayFlagsOpaqueEXT,
         0xff,
         0,                // sbt recordoffset
         0,                // sbt record stride
         0,                // miss index
         origin.xyz,
         0.001,            // tmin
         direction.xyz,
         10000.0,          // tmax
         0                 // ray payload (binding index) 
      );
      rayColor *= ray.colorAndDistance.rgb;

      const float t = ray.colorAndDistance.w;
      const bool isScattered = ray.scatterDirection.w > 0;

      // no hit, or complete absorption
      if (t < 0 || !isScattered) {
         break;
      }

      origin = origin + t * direction;
      direction = vec4(ray.scatterDirection.xyz, 0);
   }

   vec3 accumulatedColor = ubo.accumulatedFrameCount == 1? rayColor : imageLoad(accumulationImage, ivec2(gl_LaunchIDEXT.xy)).rgb + rayColor;
   imageStore(accumulationImage, ivec2(gl_LaunchIDEXT.xy), vec4(accumulatedColor, 0.0));

   // gamma correction
   vec4 pixelColor = vec4(accumulatedColor / ubo.accumulatedFrameCount, 0);
   pixelColor = sqrt(pixelColor);

   imageStore(outputImage, ivec2(gl_LaunchIDEXT.xy), pixelColor);
}
