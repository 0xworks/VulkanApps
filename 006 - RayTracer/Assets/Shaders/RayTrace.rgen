#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_NV_ray_tracing : require

#include "Bindings.glsl"
#include "Constants.glsl"
#include "Random.glsl"
#include "RayPayload.glsl"
#include "UniformBufferObject.glsl"

layout(set = 0, binding = BINDING_TLAS) uniform accelerationStructureNV world;
layout(set = 0, binding = BINDING_ACCUMULATIONIMAGE, rgba32f) uniform image2D accumulationImage;
layout(set = 0, binding = BINDING_OUTPUTIMAGE, rgba8) uniform image2D outputImage;
layout(set = 0, binding = BINDING_UNIFORMBUFFER) readonly uniform UBO {
   UniformBufferObject ubo;
};

layout(push_constant) uniform PC {
  Constants constants;
};

layout(location = 0) rayPayloadNV RayPayload ray;


void main() {
   ray.randomSeed = InitRandomSeed(InitRandomSeed(gl_LaunchIDNV.x, gl_LaunchIDNV.y), ubo.accumulatedFrameCount);

   const vec2 uv = (vec2(gl_LaunchIDNV.xy) + vec2(RandomFloat(ray.randomSeed), RandomFloat(ray.randomSeed))) / vec2(gl_LaunchSizeNV.xy) * 2.0 - 1.0;

   //const vec2 offset = constants.lensAperture * RandomInUnitDisk(ray.randomSeed);
   //vec4 origin = ubo.viewInverse * vec4(offset, 0.0f, 1.0f);
   vec4 origin =  ubo.viewInverse * vec4(0.0, 0.0, 0.0, 1.0);
   const vec4 target = ubo.projInverse * vec4(uv, 1.0, 1.0);
   //vec4 direction = ubo.viewInverse * vec4(normalize(target.xyz * constants.lensFocalLength - vec3(offset, 0.0f)), 0.0f);
   vec4 direction = ubo.viewInverse * vec4(normalize(target.xyz), 0.0);

   vec3 rayColor = vec3(0.0);
   vec3 attenuation = vec3(1.0);
   
   for (uint b = 0; b <= constants.maxRayBounces; ++b) {
      traceNV(
         world,
         gl_RayFlagsOpaqueNV,
         0xff,
         0,                // sbt recordoffset
         0,                // sbt record stride
         0,                // miss index
         origin.xyz,
         0.001f,           // tmin
         direction.xyz,
         10000.0f,         // tmax
         0                 // ray payload (binding index) 
      );

      const float t = ray.attenuationAndDistance.w;

      rayColor += attenuation * ray.emission.rgb;

      if (t < 0.0) {
         break;
      }

      const bool isScattered = ray.scatterDirection.w > 0.0;
      if(!isScattered) {
         break;
      }

      attenuation *= ray.attenuationAndDistance.rgb;
      origin = origin + t * direction;
      direction = vec4(ray.scatterDirection.xyz, 0.0);
   }

   vec3 accumulatedColor = ubo.accumulatedFrameCount == 1? rayColor : imageLoad(accumulationImage, ivec2(gl_LaunchIDNV.xy)).rgb + rayColor;
   imageStore(accumulationImage, ivec2(gl_LaunchIDNV.xy), vec4(accumulatedColor, 0.0));

   // gamma correction
   vec4 pixelColor = vec4(accumulatedColor / ubo.accumulatedFrameCount, 0.0);
   pixelColor = sqrt(pixelColor);

   imageStore(outputImage, ivec2(gl_LaunchIDNV.xy), pixelColor);
}
