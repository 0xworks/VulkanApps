#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_tracing : require

#include "Bindings.glsl"
#include "Material.glsl"
#include "Random.glsl"
#include "UniformBufferObject.glsl"

layout(set = 0, binding = BINDING_MATERIALBUFFER) readonly buffer MaterialArray { Material materials[]; };
layout(set = 0, binding = BINDING_UNIFORMBUFFER) readonly uniform UBO {
   UniformBufferObject ubo;
};

hitAttributeEXT vec4 unused;   // you must declare a hitAttributeEXT otherwise the shader does not work properly!


void ReportHit(const float t, inout float t1, inout float t2, inout uint hitSide, const uint side) {
   if(t < t1) {
      if(t1 < t2) {
         t2 = t1;
      }
      t1 = t;
      hitSide = side;
   }
   if((t < t2) && (t > t1)) {
      t2 = t;
   }
}


void IntersectXY(const float k, inout float t1, inout float t2, inout uint hitSide, const uint side) {
   const float t = (k - gl_ObjectRayOriginEXT.z) / gl_ObjectRayDirectionEXT.z;
   if (t < gl_RayTmaxEXT) {
      const vec3 p = gl_ObjectRayOriginEXT + t * gl_ObjectRayDirectionEXT;
      if ((p.x >= -0.5) && (p.x < 0.5) && (p.y >= -0.5) && (p.y < 0.5)) {
         ReportHit(t, t1, t2, hitSide, side);
      }
   }
}


void IntersectXZ(const float k, inout float t1, inout float t2, inout uint hitSide, const uint side) {
   const float t = (k - gl_ObjectRayOriginEXT.y) / gl_ObjectRayDirectionEXT.y;
   if (t < gl_RayTmaxEXT) {
      const vec3 p = gl_ObjectRayOriginEXT + t * gl_ObjectRayDirectionEXT;
      if ((p.x >= -0.5) && (p.x < 0.5) && (p.z >= -0.5) && (p.z < 0.5)) {
         ReportHit(t, t1, t2, hitSide, side);
      }
   }
}


void IntersectYZ(const float k, inout float t1, inout float t2, inout uint hitSide, const uint side) {
   const float t = (k - gl_ObjectRayOriginEXT.x) / gl_ObjectRayDirectionEXT.x;
   if (t < gl_RayTmaxEXT) {
      const vec3 p = gl_ObjectRayOriginEXT + t * gl_ObjectRayDirectionEXT;
      if ((p.y >= -0.5) && (p.y < 0.5) && (p.z >= -0.5) && (p.z < 0.5)) {
         ReportHit(t, t1, t2, hitSide, side);
      }
   }
}


void main() {
   const float k = 0.5; // box goes from -0.5 to +0.5 in each axis

   float t1 = gl_RayTmaxEXT;
   float t2 = gl_RayTmaxEXT;
   uint hitSide;

   IntersectXY(-k, t1, t2, hitSide, 0);
   IntersectXY(k, t1, t2, hitSide, 1);
   IntersectXZ(-k, t1, t2, hitSide, 2);
   IntersectXZ(k, t1, t2, hitSide, 3);
   IntersectYZ(-k, t1, t2, hitSide, 4);
   IntersectYZ(k, t1, t2, hitSide, 5);

   Material material = materials[gl_InstanceCustomIndexEXT];
   if(material.type == MATERIAL_SMOKE) {
      uint seed = InitRandomSeed(
         InitRandomSeed(
            InitRandomSeed(
               InitRandomSeed(
                  InitRandomSeed(gl_LaunchIDEXT.x, gl_LaunchIDEXT.y),
                  uint(gl_WorldRayOriginEXT.x)
               ),
               uint(gl_WorldRayOriginEXT.y)
            ),
            uint(gl_WorldRayOriginEXT.z)
         ),
         ubo.accumulatedFrameCount
      );
      const float hitDistance = max(t1, gl_RayTminEXT) + material.materialParameter1 * log(RandomFloat(seed));
      if ((hitDistance <= t2) && (t2 < gl_RayTmaxEXT)) {
         reportIntersectionEXT(hitDistance, hitSide);
      }
   } else if ((gl_RayTminEXT <= t1 && t1 < gl_RayTmaxEXT) || (gl_RayTminEXT <= t2 && t2 < gl_RayTmaxEXT)) {
      reportIntersectionEXT((gl_RayTminEXT <= t1 && t1 < gl_RayTmaxEXT) ? t1 : t2, hitSide);
   }
}
