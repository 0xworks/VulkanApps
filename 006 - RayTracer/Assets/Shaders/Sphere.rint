#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_NV_ray_tracing : require

#include "Bindings.glsl"
#include "Material.glsl"
#include "Random.glsl"
#include "UniformBufferObject.glsl"

layout(set = 0, binding = BINDING_MATERIALBUFFER) readonly buffer MaterialArray { Material materials[]; };
layout(set = 0, binding = BINDING_UNIFORMBUFFER) readonly uniform UBO {
   UniformBufferObject ubo;
};

hitAttributeNV vec4 unused;   // you must declare a hitAttributeNV otherwise the shader does not work properly!

void main() {

   // https://en.wikipedia.org/wiki/Quadratic_formula

   const vec3 oc = gl_ObjectRayOriginNV; // centre = 0
   const float a = dot(gl_ObjectRayDirectionNV, gl_ObjectRayDirectionNV);
   const float b = dot(oc, gl_ObjectRayDirectionNV);
   const float c = dot(oc, oc) - 1.0; // radius = 1
   const float discriminant = b * b - a * c;

   if (discriminant >= 0) {
      float t1 = (-b - sqrt(discriminant)) / a;
      float t2 = (-b + sqrt(discriminant)) / a;

      Material material = materials[gl_InstanceCustomIndexNV];
      if(material.type == MATERIAL_SMOKE) {
         uint seed = InitRandomSeed(
            InitRandomSeed(
               InitRandomSeed(
                  InitRandomSeed(
                     InitRandomSeed(gl_LaunchIDNV.x, gl_LaunchIDNV.y),
                     uint(gl_WorldRayOriginNV.x)
                  ),
                  uint(gl_WorldRayOriginNV.y)
               ),
               uint(gl_WorldRayOriginNV.z)
            ),
            ubo.accumulatedFrameCount
         );
         const float hitDistance = max(t1, gl_RayTminNV) + material.materialParameter1 * log(RandomFloat(seed));
         if ((hitDistance <= t2) && (t2 < gl_RayTmaxNV)) {
            reportIntersectionNV(hitDistance, 0);
         }
      } else {
         if ((gl_RayTminNV <= t1 && t1 < gl_RayTmaxNV) || (gl_RayTminNV <= t2 && t2 < gl_RayTmaxNV)) {
            reportIntersectionNV((gl_RayTminNV <= t1 && t1 < gl_RayTmaxNV) ? t1 : t2, 0);
         }
      }
   }
}
